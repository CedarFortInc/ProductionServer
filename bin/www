#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var express = require('express');
var debug = require('debug')('ProductionServer:server');
var http = require('http');
var https = require('https');
var exec = require('child_process').exec;
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '443');
app.set('port', port);

/**
 * Set HTTPS options.
 */

var httpsOptions = {
  key: fs.readFileSync('./data/cert/priv.pem'),
  cert: fs.readFileSync('./data/cert/cert.pem')
}

/**
 * Create HTTP dummy with a single route to redirect to HTTPS.
 */

var httpApp = express();
httpApp.get('*', function(req, res){
  res.redirect('https://' + req.get('host') + req.url)
});

var httpServer = http.createServer(httpApp);
httpServer.listen('80');
httpServer.on('error', onError);
httpServer.on('listening', onListening)

/**
 * Create HTTPS server.
 */

var server = https.createServer(httpsOptions ,app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//Shutdown process.
var gracefulShutdown = function() {
  console.log("Received kill signal, shutting down gracefully.");
  server.close(function() {
    console.log("Closed out remaining connections.");
    process.exit()
  });

   // if after 10 seconds, connections are not closed, force quit.
   setTimeout(function() {
       console.error("Could not close connections in time, forcefully shutting down");
       process.exit()
  }, 10*1000);
}

// listen for TERM signal .e.g. kill 
process.on ('SIGTERM', gracefulShutdown);

// listen for INT signal e.g. Ctrl-C
process.on ('SIGINT', gracefulShutdown);
